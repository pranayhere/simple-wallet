// Code generated by MockGen. DO NOT EDIT.
// Source: store/transfer.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pranayhere/simple-wallet/domain"
	store "github.com/pranayhere/simple-wallet/store"
)

// MockTransferRepo is a mock of TransferRepo interface.
type MockTransferRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepoMockRecorder
}

// MockTransferRepoMockRecorder is the mock recorder for MockTransferRepo.
type MockTransferRepoMockRecorder struct {
	mock *MockTransferRepo
}

// NewMockTransferRepo creates a new mock instance.
func NewMockTransferRepo(ctrl *gomock.Controller) *MockTransferRepo {
	mock := &MockTransferRepo{ctrl: ctrl}
	mock.recorder = &MockTransferRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepo) EXPECT() *MockTransferRepoMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferRepo) CreateTransfer(ctx context.Context, arg store.CreateTransferParams) (domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, arg)
	ret0, _ := ret[0].(domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferRepoMockRecorder) CreateTransfer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferRepo)(nil).CreateTransfer), ctx, arg)
}

// GetTransfer mocks base method.
func (m *MockTransferRepo) GetTransfer(ctx context.Context, id int64) (domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", ctx, id)
	ret0, _ := ret[0].(domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockTransferRepoMockRecorder) GetTransfer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockTransferRepo)(nil).GetTransfer), ctx, id)
}

// ListTransfers mocks base method.
func (m *MockTransferRepo) ListTransfers(ctx context.Context, arg store.ListTransfersParams) ([]domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", ctx, arg)
	ret0, _ := ret[0].([]domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockTransferRepoMockRecorder) ListTransfers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockTransferRepo)(nil).ListTransfers), ctx, arg)
}
