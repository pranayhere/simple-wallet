// Code generated by MockGen. DO NOT EDIT.
// Source: store/bankaccount.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pranayhere/simple-wallet/domain"
	store "github.com/pranayhere/simple-wallet/store"
)

// MockBankAccountRepo is a mock of BankAccountRepo interface.
type MockBankAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountRepoMockRecorder
}

// MockBankAccountRepoMockRecorder is the mock recorder for MockBankAccountRepo.
type MockBankAccountRepoMockRecorder struct {
	mock *MockBankAccountRepo
}

// NewMockBankAccountRepo creates a new mock instance.
func NewMockBankAccountRepo(ctrl *gomock.Controller) *MockBankAccountRepo {
	mock := &MockBankAccountRepo{ctrl: ctrl}
	mock.recorder = &MockBankAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountRepo) EXPECT() *MockBankAccountRepoMockRecorder {
	return m.recorder
}

// BankAccountVerificationFailed mocks base method.
func (m *MockBankAccountRepo) BankAccountVerificationFailed(ctx context.Context, arg store.BankAccountVerificationParams) (store.BankAccountVerificationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BankAccountVerificationFailed", ctx, arg)
	ret0, _ := ret[0].(store.BankAccountVerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BankAccountVerificationFailed indicates an expected call of BankAccountVerificationFailed.
func (mr *MockBankAccountRepoMockRecorder) BankAccountVerificationFailed(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BankAccountVerificationFailed", reflect.TypeOf((*MockBankAccountRepo)(nil).BankAccountVerificationFailed), ctx, arg)
}

// BankAccountVerificationSuccess mocks base method.
func (m *MockBankAccountRepo) BankAccountVerificationSuccess(ctx context.Context, arg store.BankAccountVerificationParams) (store.BankAccountVerificationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BankAccountVerificationSuccess", ctx, arg)
	ret0, _ := ret[0].(store.BankAccountVerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BankAccountVerificationSuccess indicates an expected call of BankAccountVerificationSuccess.
func (mr *MockBankAccountRepoMockRecorder) BankAccountVerificationSuccess(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BankAccountVerificationSuccess", reflect.TypeOf((*MockBankAccountRepo)(nil).BankAccountVerificationSuccess), ctx, arg)
}

// CreateBankAccount mocks base method.
func (m *MockBankAccountRepo) CreateBankAccount(ctx context.Context, arg store.CreateBankAccountParams) (domain.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccount", ctx, arg)
	ret0, _ := ret[0].(domain.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockBankAccountRepoMockRecorder) CreateBankAccount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockBankAccountRepo)(nil).CreateBankAccount), ctx, arg)
}

// CreateBankAccountWithWallet mocks base method.
func (m *MockBankAccountRepo) CreateBankAccountWithWallet(ctx context.Context, arg store.CreateBankAccountWithWalletParams) (store.BankAccountWithWalletResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccountWithWallet", ctx, arg)
	ret0, _ := ret[0].(store.BankAccountWithWalletResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccountWithWallet indicates an expected call of CreateBankAccountWithWallet.
func (mr *MockBankAccountRepoMockRecorder) CreateBankAccountWithWallet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccountWithWallet", reflect.TypeOf((*MockBankAccountRepo)(nil).CreateBankAccountWithWallet), ctx, arg)
}

// GetBankAccount mocks base method.
func (m *MockBankAccountRepo) GetBankAccount(ctx context.Context, id int64) (domain.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", ctx, id)
	ret0, _ := ret[0].(domain.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockBankAccountRepoMockRecorder) GetBankAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockBankAccountRepo)(nil).GetBankAccount), ctx, id)
}

// ListBankAccounts mocks base method.
func (m *MockBankAccountRepo) ListBankAccounts(ctx context.Context, arg store.ListBankAccountsParams) ([]domain.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankAccounts", ctx, arg)
	ret0, _ := ret[0].([]domain.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBankAccounts indicates an expected call of ListBankAccounts.
func (mr *MockBankAccountRepoMockRecorder) ListBankAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankAccounts", reflect.TypeOf((*MockBankAccountRepo)(nil).ListBankAccounts), ctx, arg)
}

// UpdateBankAccountStatus mocks base method.
func (m *MockBankAccountRepo) UpdateBankAccountStatus(ctx context.Context, arg store.UpdateBankAccountStatusParams) (domain.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankAccountStatus", ctx, arg)
	ret0, _ := ret[0].(domain.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankAccountStatus indicates an expected call of UpdateBankAccountStatus.
func (mr *MockBankAccountRepoMockRecorder) UpdateBankAccountStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccountStatus", reflect.TypeOf((*MockBankAccountRepo)(nil).UpdateBankAccountStatus), ctx, arg)
}
