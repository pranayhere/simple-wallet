// Code generated by MockGen. DO NOT EDIT.
// Source: store/wallet.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pranayhere/simple-wallet/domain"
	store "github.com/pranayhere/simple-wallet/store"
)

// MockWalletRepo is a mock of WalletRepo interface.
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo.
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance.
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// AddWalletBalance mocks base method.
func (m *MockWalletRepo) AddWalletBalance(ctx context.Context, arg store.AddWalletBalanceParams) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWalletBalance", ctx, arg)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWalletBalance indicates an expected call of AddWalletBalance.
func (mr *MockWalletRepoMockRecorder) AddWalletBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWalletBalance", reflect.TypeOf((*MockWalletRepo)(nil).AddWalletBalance), ctx, arg)
}

// CreateWallet mocks base method.
func (m *MockWalletRepo) CreateWallet(ctx context.Context, arg store.CreateWalletParams) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, arg)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepoMockRecorder) CreateWallet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepo)(nil).CreateWallet), ctx, arg)
}

// GetWallet mocks base method.
func (m *MockWalletRepo) GetWallet(ctx context.Context, id int64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, id)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepoMockRecorder) GetWallet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepo)(nil).GetWallet), ctx, id)
}

// GetWalletByAddress mocks base method.
func (m *MockWalletRepo) GetWalletByAddress(ctx context.Context, address string) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddress", ctx, address)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddress indicates an expected call of GetWalletByAddress.
func (mr *MockWalletRepoMockRecorder) GetWalletByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddress", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletByAddress), ctx, address)
}

// GetWalletByAddressForUpdate mocks base method.
func (m *MockWalletRepo) GetWalletByAddressForUpdate(ctx context.Context, address string) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddressForUpdate", ctx, address)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddressForUpdate indicates an expected call of GetWalletByAddressForUpdate.
func (mr *MockWalletRepoMockRecorder) GetWalletByAddressForUpdate(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddressForUpdate", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletByAddressForUpdate), ctx, address)
}

// GetWalletByBankAccountID mocks base method.
func (m *MockWalletRepo) GetWalletByBankAccountID(ctx context.Context, bankAccountID int64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByBankAccountID", ctx, bankAccountID)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByBankAccountID indicates an expected call of GetWalletByBankAccountID.
func (mr *MockWalletRepoMockRecorder) GetWalletByBankAccountID(ctx, bankAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByBankAccountID", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletByBankAccountID), ctx, bankAccountID)
}

// GetWalletByBankAccountIDForUpdate mocks base method.
func (m *MockWalletRepo) GetWalletByBankAccountIDForUpdate(ctx context.Context, bankAccountID int64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByBankAccountIDForUpdate", ctx, bankAccountID)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByBankAccountIDForUpdate indicates an expected call of GetWalletByBankAccountIDForUpdate.
func (mr *MockWalletRepoMockRecorder) GetWalletByBankAccountIDForUpdate(ctx, bankAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByBankAccountIDForUpdate", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletByBankAccountIDForUpdate), ctx, bankAccountID)
}

// GetWalletForUpdate mocks base method.
func (m *MockWalletRepo) GetWalletForUpdate(ctx context.Context, id int64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletForUpdate", ctx, id)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletForUpdate indicates an expected call of GetWalletForUpdate.
func (mr *MockWalletRepoMockRecorder) GetWalletForUpdate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletForUpdate", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletForUpdate), ctx, id)
}

// ListWallets mocks base method.
func (m *MockWalletRepo) ListWallets(ctx context.Context, arg store.ListWalletsParams) ([]domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallets", ctx, arg)
	ret0, _ := ret[0].([]domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallets indicates an expected call of ListWallets.
func (mr *MockWalletRepoMockRecorder) ListWallets(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallets", reflect.TypeOf((*MockWalletRepo)(nil).ListWallets), ctx, arg)
}

// SendMoney mocks base method.
func (m *MockWalletRepo) SendMoney(ctx context.Context, arg store.SendMoneyParams) (store.WalletTransferResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMoney", ctx, arg)
	ret0, _ := ret[0].(store.WalletTransferResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMoney indicates an expected call of SendMoney.
func (mr *MockWalletRepoMockRecorder) SendMoney(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMoney", reflect.TypeOf((*MockWalletRepo)(nil).SendMoney), ctx, arg)
}

// UpdateWalletStatus mocks base method.
func (m *MockWalletRepo) UpdateWalletStatus(ctx context.Context, arg store.UpdateWalletStatusParams) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletStatus", ctx, arg)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletStatus indicates an expected call of UpdateWalletStatus.
func (mr *MockWalletRepoMockRecorder) UpdateWalletStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletStatus", reflect.TypeOf((*MockWalletRepo)(nil).UpdateWalletStatus), ctx, arg)
}
