// Code generated by sqlc. DO NOT EDIT.
// source: bankaccount.sql

package db

import (
	"context"
)

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_accounts (account_no,
                           ifsc,
                           bank_name,
                           currency,
                           user_id,
                           status)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, account_no, ifsc, bank_name, status, user_id, currency, created_at, updated_at
`

type CreateBankAccountParams struct {
	AccountNo string            `json:"account_no"`
	Ifsc      string            `json:"ifsc"`
	BankName  string            `json:"bank_name"`
	Currency  string            `json:"currency"`
	UserID    int64             `json:"user_id"`
	Status    BankAccountStatus `json:"status"`
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, createBankAccount,
		arg.AccountNo,
		arg.Ifsc,
		arg.BankName,
		arg.Currency,
		arg.UserID,
		arg.Status,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.AccountNo,
		&i.Ifsc,
		&i.BankName,
		&i.Status,
		&i.UserID,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, account_no, ifsc, bank_name, status, user_id, currency, created_at, updated_at
from bank_accounts
where id = $1 LIMIT 1
`

func (q *Queries) GetBankAccount(ctx context.Context, id int64) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, getBankAccount, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.AccountNo,
		&i.Ifsc,
		&i.BankName,
		&i.Status,
		&i.UserID,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBankAccounts = `-- name: ListBankAccounts :many
SELECT id, account_no, ifsc, bank_name, status, user_id, currency, created_at, updated_at
FROM bank_accounts
WHERE user_id = $1
ORDER BY id LIMIT $2
OFFSET $3
`

type ListBankAccountsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBankAccounts(ctx context.Context, arg ListBankAccountsParams) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, listBankAccounts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankAccount{}
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.AccountNo,
			&i.Ifsc,
			&i.BankName,
			&i.Status,
			&i.UserID,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBankAccountStatus = `-- name: UpdateBankAccountStatus :one
UPDATE bank_accounts
set Status = $1
where id = $2
RETURNING id, account_no, ifsc, bank_name, status, user_id, currency, created_at, updated_at
`

type UpdateBankAccountStatusParams struct {
	Status BankAccountStatus `json:"status"`
	ID     int64             `json:"id"`
}

func (q *Queries) UpdateBankAccountStatus(ctx context.Context, arg UpdateBankAccountStatusParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, updateBankAccountStatus, arg.Status, arg.ID)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.AccountNo,
		&i.Ifsc,
		&i.BankName,
		&i.Status,
		&i.UserID,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
