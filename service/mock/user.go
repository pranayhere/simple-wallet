// Code generated by MockGen. DO NOT EDIT.
// Source: service/user.go

// Package mocksvc is a generated GoMock package.
package mocksvc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/pranayhere/simple-wallet/dto"
)

// MockUserSvc is a mock of UserSvc interface.
type MockUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcMockRecorder
}

// MockUserSvcMockRecorder is the mock recorder for MockUserSvc.
type MockUserSvcMockRecorder struct {
	mock *MockUserSvc
}

// NewMockUserSvc creates a new mock instance.
func NewMockUserSvc(ctrl *gomock.Controller) *MockUserSvc {
	mock := &MockUserSvc{ctrl: ctrl}
	mock.recorder = &MockUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvc) EXPECT() *MockUserSvcMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserSvc) CreateUser(ctx context.Context, createUserDto dto.CreateUserDto) (dto.UserDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, createUserDto)
	ret0, _ := ret[0].(dto.UserDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserSvcMockRecorder) CreateUser(ctx, createUserDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserSvc)(nil).CreateUser), ctx, createUserDto)
}

// LoginUser mocks base method.
func (m *MockUserSvc) LoginUser(ctx context.Context, loginCredsDto dto.LoginCredentialsDto) (dto.LoginUserDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, loginCredsDto)
	ret0, _ := ret[0].(dto.LoginUserDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserSvcMockRecorder) LoginUser(ctx, loginCredsDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserSvc)(nil).LoginUser), ctx, loginCredsDto)
}
