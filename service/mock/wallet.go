// Code generated by MockGen. DO NOT EDIT.
// Source: service/wallet.go

// Package mocksvc is a generated GoMock package.
package mocksvc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/pranayhere/simple-wallet/dto"
)

// MockWalletSvc is a mock of WalletSvc interface.
type MockWalletSvc struct {
	ctrl     *gomock.Controller
	recorder *MockWalletSvcMockRecorder
}

// MockWalletSvcMockRecorder is the mock recorder for MockWalletSvc.
type MockWalletSvcMockRecorder struct {
	mock *MockWalletSvc
}

// NewMockWalletSvc creates a new mock instance.
func NewMockWalletSvc(ctrl *gomock.Controller) *MockWalletSvc {
	mock := &MockWalletSvc{ctrl: ctrl}
	mock.recorder = &MockWalletSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletSvc) EXPECT() *MockWalletSvcMockRecorder {
	return m.recorder
}

// GetWalletByAddress mocks base method.
func (m *MockWalletSvc) GetWalletByAddress(ctx context.Context, address string) (dto.WalletDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddress", ctx, address)
	ret0, _ := ret[0].(dto.WalletDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddress indicates an expected call of GetWalletByAddress.
func (mr *MockWalletSvcMockRecorder) GetWalletByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddress", reflect.TypeOf((*MockWalletSvc)(nil).GetWalletByAddress), ctx, address)
}

// GetWalletById mocks base method.
func (m *MockWalletSvc) GetWalletById(ctx context.Context, id int64) (dto.WalletDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletById", ctx, id)
	ret0, _ := ret[0].(dto.WalletDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletById indicates an expected call of GetWalletById.
func (mr *MockWalletSvcMockRecorder) GetWalletById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletById", reflect.TypeOf((*MockWalletSvc)(nil).GetWalletById), ctx, id)
}

// Pay mocks base method.
func (m *MockWalletSvc) Pay(ctx context.Context, transferMoneyDto dto.TransferMoneyDto) (dto.WalletTransferResultDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", ctx, transferMoneyDto)
	ret0, _ := ret[0].(dto.WalletTransferResultDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pay indicates an expected call of Pay.
func (mr *MockWalletSvcMockRecorder) Pay(ctx, transferMoneyDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockWalletSvc)(nil).Pay), ctx, transferMoneyDto)
}

// PayByWalletID mocks base method.
func (m *MockWalletSvc) PayByWalletID(ctx context.Context, transferMoneyDto dto.TransferMoneyByWalletIDDto) (dto.WalletTransferResultDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayByWalletID", ctx, transferMoneyDto)
	ret0, _ := ret[0].(dto.WalletTransferResultDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayByWalletID indicates an expected call of PayByWalletID.
func (mr *MockWalletSvcMockRecorder) PayByWalletID(ctx, transferMoneyDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayByWalletID", reflect.TypeOf((*MockWalletSvc)(nil).PayByWalletID), ctx, transferMoneyDto)
}
