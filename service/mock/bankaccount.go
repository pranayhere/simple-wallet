// Code generated by MockGen. DO NOT EDIT.
// Source: service/bankaccount.go

// Package mocksvc is a generated GoMock package.
package mocksvc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/pranayhere/simple-wallet/dto"
)

// MockBankAccountSvc is a mock of BankAccountSvc interface.
type MockBankAccountSvc struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountSvcMockRecorder
}

// MockBankAccountSvcMockRecorder is the mock recorder for MockBankAccountSvc.
type MockBankAccountSvcMockRecorder struct {
	mock *MockBankAccountSvc
}

// NewMockBankAccountSvc creates a new mock instance.
func NewMockBankAccountSvc(ctrl *gomock.Controller) *MockBankAccountSvc {
	mock := &MockBankAccountSvc{ctrl: ctrl}
	mock.recorder = &MockBankAccountSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountSvc) EXPECT() *MockBankAccountSvcMockRecorder {
	return m.recorder
}

// CreateBankAccount mocks base method.
func (m *MockBankAccountSvc) CreateBankAccount(ctx context.Context, newBankAcctDto dto.CreateBankAccountDto) (dto.BankAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccount", ctx, newBankAcctDto)
	ret0, _ := ret[0].(dto.BankAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockBankAccountSvcMockRecorder) CreateBankAccount(ctx, newBankAcctDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockBankAccountSvc)(nil).CreateBankAccount), ctx, newBankAcctDto)
}

// GetBankAccount mocks base method.
func (m *MockBankAccountSvc) GetBankAccount(ctx context.Context, bankAccountId int64) (dto.BankAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", ctx, bankAccountId)
	ret0, _ := ret[0].(dto.BankAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockBankAccountSvcMockRecorder) GetBankAccount(ctx, bankAccountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockBankAccountSvc)(nil).GetBankAccount), ctx, bankAccountId)
}

// VerificationFailed mocks base method.
func (m *MockBankAccountSvc) VerificationFailed(ctx context.Context, verificationDto dto.BankAccountVerificationDto) (dto.BankAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationFailed", ctx, verificationDto)
	ret0, _ := ret[0].(dto.BankAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificationFailed indicates an expected call of VerificationFailed.
func (mr *MockBankAccountSvcMockRecorder) VerificationFailed(ctx, verificationDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationFailed", reflect.TypeOf((*MockBankAccountSvc)(nil).VerificationFailed), ctx, verificationDto)
}

// VerificationSuccess mocks base method.
func (m *MockBankAccountSvc) VerificationSuccess(ctx context.Context, verificationDto dto.BankAccountVerificationDto) (dto.BankAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationSuccess", ctx, verificationDto)
	ret0, _ := ret[0].(dto.BankAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificationSuccess indicates an expected call of VerificationSuccess.
func (mr *MockBankAccountSvcMockRecorder) VerificationSuccess(ctx, verificationDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationSuccess", reflect.TypeOf((*MockBankAccountSvc)(nil).VerificationSuccess), ctx, verificationDto)
}
